<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-10-15T03:33:21-04:00</updated><id>http://localhost:4000/</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2017/10/15/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-10-15T03:26:00-04:00</published><updated>2017-10-15T03:26:00-04:00</updated><id>http://localhost:4000/jekyll/update/2017/10/15/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/10/15/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Using argument parser for Python scripts</title><link href="http://localhost:4000/cs/2017/07/24/argparser-python.html" rel="alternate" type="text/html" title="Using argument parser for Python scripts" /><published>2017-07-24T11:00:38-04:00</published><updated>2017-07-24T11:00:38-04:00</updated><id>http://localhost:4000/cs/2017/07/24/argparser-python</id><content type="html" xml:base="http://localhost:4000/cs/2017/07/24/argparser-python.html">&lt;p&gt;It’s often easy to run your Python scripts from the command line. Sometimes, your scripts may require a form of input to run- here’s a two-minute recipe to use the ArgumentParser module in Python to allow you to enter these inputs like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python script.py --input &amp;lt;input&amp;gt;
# can use input in script
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then using these inputs in your program. Easy/quick documentation for these things can be hard to come by, so I’m making some notes here for reference.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First, install the &lt;a href=&quot;https://pypi.python.org/pypi/argparse&quot;&gt;argparse module&lt;/a&gt;- this is built in for most standard versions of Python, but run this to be sure you have it.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pip install argparse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Say we wanted to use argparse to input a string value of someone’s name, for our Python script hello.py that says hello and happy birthday to an input person for an input age:&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Monty'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Happy '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'th'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;' Birthday '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Ex: Happy 20th Birthday John!  for name = John, age = 20. &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;First, we import the argparse model and instantiate an object:&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;argparse&lt;/span&gt; 


&lt;span class=&quot;n&quot;&gt;ap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argparse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Greet the user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Optional: put in a description for your script &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;Next, we add the argument, ‘name’, to our argparse object with the add_argument function with the following parameters:&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;ap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;--name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Shamikh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Name of person to greet. ex: Shamikh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;--age&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Age of person to greet. ex: 19&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;“-n” and “–name” serve the same function, that is, they will indicate the parameter the user is entering, which becomes important if we have multiple parameters. “-j” is simply the shorthand abbreviation that can also be used to indicate that the next value entered is the argument desired.&lt;/li&gt;
  &lt;li&gt;type: indicates the data type desired, will usually be string (str), float, integer (int) as needed&lt;/li&gt;
  &lt;li&gt;default: the default value of the input that is assumed if nothing is input by the user. So, if the user simply enters ‘python script.py’ in the command line, then the default values will be used to run the program.&lt;/li&gt;
  &lt;li&gt;help: the user can simply enter ‘–help’ to see this helper string, along with the helper strings of all your inputs. Useful to explain requirements of the sought input here, and an example.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the user types&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python script.py --help 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;They will see:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;usage: script.py [-h] [-n NAME] [-a AGE]

Script to greet and wish happy birthday.

optional arguments:
  -h, --help            show this help message and exit
  -n NAME, --name NAME  Name of person to greet. ex: Monty
  -a AGE, --age AGE     Age of person to greet. ex: 19
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Sweet! Now how do we use these values into our program? If we use the parse_args() function, the entered inputs can be loaded into a python dictionary.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# we can now access the inputs with their reference: &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Happy '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'th'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;' Birthday '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So, for a test run (here’s the full code):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;argparse&lt;/span&gt; 


&lt;span class=&quot;n&quot;&gt;ap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argparse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Script to greet and wish happy birthday.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;--name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Shamikh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Name of person to greet. ex: Shamikh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;--age&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Age of person to greet. ex: 19&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Happy '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'th'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;' Birthday '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And here’s the output of running the script in Terminal:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python script.py -name Monty -age 100
Happy 100th Birthday Monty!

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
    /**
     *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
     *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables
     */
    
    var disqus_config = function () {
        this.page.url = 'http://shamikh.tech/blog/';  // Replace PAGE_URL with your page's canonical URL variable
        this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
    };
    
    (function() {  // DON'T EDIT BELOW THIS LINE
        var d = document, s = d.createElement('script');
        
        s.src = 'https://shamikh.disqus.com/embed.js';
        
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    })();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot; rel=&quot;nofollow&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;script id=&quot;dsq-count-scr&quot; src=&quot;//shamikh.disqus.com/count.js&quot; async=&quot;&quot;&gt;&lt;/script&gt;</content><author><name></name></author><summary type="html">It’s often easy to run your Python scripts from the command line. Sometimes, your scripts may require a form of input to run- here’s a two-minute recipe to use the ArgumentParser module in Python to allow you to enter these inputs like the following:</summary></entry><entry><title type="html">Intro to stock trading</title><link href="http://localhost:4000/econ'/2017/05/23/notes-on-stocks.html" rel="alternate" type="text/html" title="Intro to stock trading" /><published>2017-05-23T11:00:38-04:00</published><updated>2017-05-23T11:00:38-04:00</updated><id>http://localhost:4000/econ'/2017/05/23/notes-on-stocks</id><content type="html" xml:base="http://localhost:4000/econ'/2017/05/23/notes-on-stocks.html">&lt;p&gt;With new trading platforms and applications truly democratizing the power to buy and sell stocks, there are plentiful interesting and affordable ways to get involved with the stock market. A particulary cool application called &lt;a href=&quot;https://www.robinhood.com/&quot;&gt;RobinHood&lt;/a&gt; emerged that allowed one to buy and sell stocks without commision, and so I decided to get involved. As a complete beginner with only an Econ 101 exposure to markets and practically zero understanding of finance, I decided to compile some notes about stock trading in general, because I felt there was a shortage of concise, easy information for a complete beginner. The fact of the matter is entire books/bookshelves have been filled with information about investments, but here’s a few cents and trading tips for a new investor using a buy and sell platform like RobinHood.
Eventually, I sought to create some Jupyter notebooks that enabled me to get some quick price data analysis information on the stocks that I owned, which are essentially Python scripts into which I imported stock prices using the Yahoo Finance Python module (there are plenty of stock market API’s you can use, &lt;a href=&quot;https://www.oanda.com/&quot;&gt;Oanda&lt;/a&gt;, &lt;a href=&quot;https://www.quandl.com/&quot;&gt;Quandl&lt;/a&gt;, etc.) The notebook can be found &lt;a href=&quot;https://github.com/shamikh-mill/stock-checker/blob/master/price-checker.ipynb&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Disclaimer- as a complete beginner on a learning experience, some of these strategies can be outright incorrect, in which case I’d love to be informed of and learn the real way to do things.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;From Investopedia: Stocks are shares in the ownership of a company, and represent a claim on a company’s assets and earnings. But it’s important to understand that stockholders (or shareholders) don’t own the company itself, instead simply the shares of earnings/assets issued by the companies.&lt;/li&gt;
  &lt;li&gt;Portfolio - grouping of financial assets, your shares.&lt;/li&gt;
  &lt;li&gt;Bullish stocks - characterized by rising share prices.&lt;/li&gt;
  &lt;li&gt;Bearish stocks - characterized by falling share prices.&lt;/li&gt;
  &lt;li&gt;You, as the investor, seek to minimize your losses (the total fall in price of your portfolio) and to maximize your return, the gains in price. RobinHood will show you your average cost for your shares for each stock and the total return on that stock, both of which are important to keep track of.&lt;/li&gt;
  &lt;li&gt;The Intuition: Buy stocks at the absolute low, and sell at at the absolute high. (only occurs if you’re lucky)&lt;/li&gt;
  &lt;li&gt;In the perfect world, you buy a stock when it is bullish and yet at a very low price, perhaps near its 52-week low, and sell a stock when it is very high and bearish. In practice, very few investors are able to achieve this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RobinHood allows you to buy and sell stocks on the open market without paying a fee. To be able to trade, you have to register an account using your social security number and wait a few days for approval.&lt;br /&gt;
The app’s interface is intuitive and self-explanatory. You can add stocks to your watchlist, and view a graph of its price per share in time periods from a day to five years. It’s easy to see using these why FANG stocks (Facebook, Apple, Netflix, and Google) are some of the most high-performing stocks tech stocks- looking back a few years, we see steady, linear increases in their values.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Buying- Probably the part of investment that gets the most attention, just because the price you buy at singlehandedly determines whether or not you have an actual return. There is a whole mini-world of analysts who look at so, so many factors both inside companies and in the aggregate economy to try and find the most auspicious shares, the ones that minimize risk and maximize return. Financial advising and investment banking are basically all about that. As a humble stock trader from your phone, how do you know when to buy?&lt;br /&gt;
To determine which stocks to buy, I simply keep an ear out for companies that are doing well- releasing new products soon, etc. It’s also important to guage public opinion on these matters. For example, when United Airlines got themselves into the Dr. Dao controversy and took enormous criticism, their stock ($UAL) took a 4% hit (from about $72 to about $68, which is a huge deal) and the company lost millions of dollars.&lt;br /&gt;
But to bring in a more rigorous aspect to buying (or selling for that matter) it’s important to check out analyst reviews for stocks. Some great websites for this would be &lt;a href=&quot;https://Barchart.com&quot;&gt;Barchart.com&lt;/a&gt;, &lt;a href=&quot;https://marketwatch.com&quot;&gt;marketwatch.com&lt;/a&gt;, and &lt;a href=&quot;https://stocktwits.com&quot;&gt;stocktwits.com&lt;/a&gt;. Ratings are provided for each stock which advise to overweight (buy more), underweight (sell some), hold (keep your shares). When a stock is marked as overweight, it is expected to “outperform its industry in the market”- from Investopedia this can be “due to a steady stream of positive news, good earnings and raised guidance.” In general, these are stocks you’d want to have.&lt;/li&gt;
  &lt;li&gt;Holding- Dealing in stocks can require a frustrating amount of patience. Sometimes it can be better to hold than to sell your shares even if a stock is bearish; plentiful ratings from online services evidence this.&lt;/li&gt;
  &lt;li&gt;Selling- important, because while buying can set you up for profit, it’s not ensured until you actually sell. It’s often hard to sell (bullish stocks) because mentally you want its share price to perhaps continue its upward trend, making you more money, but as outlined in “The Casino Trade” on Investopedia this can often lead to a frustrating loss when you wait too long and eventually just sell off shares at much lower prices than what once was. You can use the websites above for advice on selling as well, of course. Some things to watch for:
    &lt;ul&gt;
      &lt;li&gt;Sell stocks if they suddenly increase in price, over a very short period. It’s best to sell in this scenario because the share can be back down just as fast.&lt;/li&gt;
      &lt;li&gt;Sell stocks when the company seems to be losing to competitors over a long period of time.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At the end of the day, be sure to keep from selling or buying solely based on emotion or impatience on instead on analyst opinion and real trends. Investopedia explains the more rigorous methodology for buying and selling much better than I: 
&lt;a href=&quot;http://www.investopedia.com/articles/financialcareers/06/snapdecisions.asp?ad=dirN&amp;amp;qo=investopediaSiteSearch&amp;amp;qsrc=0&amp;amp;o=40186&quot;&gt;When to buy, sell or hold stocks&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.investopedia.com/articles/stocks/10/when-to-sell-stocks.asp&quot;&gt;When to sell stocks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other RobinHood things:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Dividends- Sometimes companies pay out a sum of its earnings to its shareholders. Always good!&lt;/li&gt;
  &lt;li&gt;Check the “History” page in the app to keep track of your transactions (most importantly, the price at which you purchased).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy trading!&lt;/p&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
    /**
     *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
     *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables
     */
    
    var disqus_config = function () {
        this.page.url = 'http://shamikh.tech/blog/';  // Replace PAGE_URL with your page's canonical URL variable
        this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
    };
    
    (function() {  // DON'T EDIT BELOW THIS LINE
        var d = document, s = d.createElement('script');
        
        s.src = 'https://shamikh.disqus.com/embed.js';
        
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    })();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot; rel=&quot;nofollow&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;script id=&quot;dsq-count-scr&quot; src=&quot;//shamikh.disqus.com/count.js&quot; async=&quot;&quot;&gt;&lt;/script&gt;</content><author><name></name></author><summary type="html">With new trading platforms and applications truly democratizing the power to buy and sell stocks, there are plentiful interesting and affordable ways to get involved with the stock market. A particulary cool application called RobinHood emerged that allowed one to buy and sell stocks without commision, and so I decided to get involved. As a complete beginner with only an Econ 101 exposure to markets and practically zero understanding of finance, I decided to compile some notes about stock trading in general, because I felt there was a shortage of concise, easy information for a complete beginner. The fact of the matter is entire books/bookshelves have been filled with information about investments, but here’s a few cents and trading tips for a new investor using a buy and sell platform like RobinHood. Eventually, I sought to create some Jupyter notebooks that enabled me to get some quick price data analysis information on the stocks that I owned, which are essentially Python scripts into which I imported stock prices using the Yahoo Finance Python module (there are plenty of stock market API’s you can use, Oanda, Quandl, etc.) The notebook can be found here.</summary></entry><entry><title type="html">Notes on deep learning</title><link href="http://localhost:4000/datasci/2017/05/21/notes-on-deep-learning.html" rel="alternate" type="text/html" title="Notes on deep learning" /><published>2017-05-21T13:46:38-04:00</published><updated>2017-05-21T13:46:38-04:00</updated><id>http://localhost:4000/datasci/2017/05/21/notes-on-deep-learning</id><content type="html" xml:base="http://localhost:4000/datasci/2017/05/21/notes-on-deep-learning.html">&lt;p&gt;This is an agglomeration of my notes from various resources on the subject of deep learning and neural networks, which I will be using in my research this summer. Some of the primary sources used are DataCamp courses.&lt;/p&gt;

&lt;p&gt;Introduction&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deep learning is used for high-dimensional datasets in which the variables often interact with one another. Deep learning uses neural networks that account for these interactions by detecting these relationships.&lt;/li&gt;
  &lt;li&gt;Neural networks take variables that interact and calculate a function of those variables that accounts for their interaction, and use this to predict the outcome.&lt;/li&gt;
  &lt;li&gt;Multi-layer perception structure for neural network: input layer (variables/features) and output layers, and all non-input or non-output layers are called hidden layers. These are not observed directly from the real world. Each node in the hidden layer is an aggregation of information from the input data. Each node adds to the model’s ability to capture interactions by “distilling”- they detect the useful, deterministic patterns from the inputs and passes these on to the next later, removing redundant information&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;img https://static.wixstatic.com/media/f0c89a_4662ef36f1ab44ac9e8675c4c37aa3e4~mv2.png/v1/fill/w_630,h_353,al_c,lg_1/f0c89a_4662ef36f1ab44ac9e8675c4c37aa3e4~mv2.png&amp;quot;Network Structure&amp;quot;&quot; alt=&quot;network structure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Process&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Inputs have an assigned weight, a measure of their importance.&lt;/li&gt;
  &lt;li&gt;An activation function at each node captures a non-linear relationship between the inputs, and converts the inputs into a more useful output.&lt;/li&gt;
  &lt;li&gt;Ex: Sigmoid activation function creates an output with values between 0 and 1. There can be other activation functions like Tanh, softmax and RELU.&lt;/li&gt;
  &lt;li&gt;In a feed-forward network, input signals flow from first inputs to final outputs. Feedback/Recurrent networks have signals flowing from both directions.&lt;/li&gt;
  &lt;li&gt;The way neural networks become good models for predictions is by tuning these weights, acquiring optimal parameter values that minimize the error in approximating a final solution.&lt;/li&gt;
  &lt;li&gt;Ex: Using supervised train-test split, we can train the weights. We can also use Back-Propogation learning algorithms to adjust the weights based on the errors from the network. The most common method of back-propogation uses gradient descent to find the parameter that produces the least error.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Advantages of Neural Networks&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Are able to capture and model non-linear, complex relationships&lt;/li&gt;
  &lt;li&gt;After learning relationships in learned data, can infer relationships between inputs in unseen data&lt;/li&gt;
  &lt;li&gt;Neural networks are great for data with high heteroskedasticity, or data with sub-populations that have different variabilities (variance or statistical dispersion) than other sub-populations. They don’t impose restrictions on input variables and thus are suitable for modeling data with high data volatility, like stock prices.&lt;/li&gt;
  &lt;li&gt;Since neural networks can take in a lot of inputs and infer non-linear relationships, they’re great for image processing and computer vision.&lt;/li&gt;
  &lt;li&gt;Forecasting applications are also viable because of detection of unseen factors and the non-restrictive manner in which neural networks process inputs. Long short-term memory networks and Recurrent Neural Networks are especially of interest in the field of finance and forecasting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Convolutional Neural Networks for Image Recognition&lt;/p&gt;

&lt;p&gt;Key Terms&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CNN- feed-forward artificial neural networks that consist of an input and output layer and hidden layers that convolutional, pooling, or fully connected.&lt;/li&gt;
  &lt;li&gt;Convolution operation: a function derived from two given functions by integration that expresses how the shape of one is modified by the other.&lt;/li&gt;
  &lt;li&gt;Convolutional layer: apply convolution operation to the input, passing the result into the next layer, approximates the response of an individual neuron to visual stimuli. This operation is meant to reduce the number of free parameters to improve generalizations.&lt;/li&gt;
  &lt;li&gt;Pooling layer: Can be included as local or global pooling layers, combining the outputs of neuron clusters in one layer into one single neuron in the next layer. Ex: Max pooling uses the the maximum value from each cluster of neurons in the previous layer.&lt;/li&gt;
  &lt;li&gt;Fully connected layer: connect every neuron in one layer to every neuron in another layer.&lt;/li&gt;
  &lt;li&gt;Feature Extraction: technique used to determine the most “important” parts of an image&lt;/li&gt;
  &lt;li&gt;Kernel (image processing): small matrix used to apply effects (blurring, sharpening, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Introduction&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In essence, CNNs can be thought of as a kind of neural network that uses many identical copies of the same neuron. With more neurons, the model is able to express computationally large models while keeping the number of paramaters that need to be learned small.&lt;/li&gt;
  &lt;li&gt;Similar to the way we modularize code by writing functions, we can “modularize” a neuron by using it in many places after we have learned it once.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Process&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The simplest way to classify data with a neural network is to connect every single input with a fully connected layer&lt;/li&gt;
  &lt;li&gt;But in order to examine certain properties that are localized to a piece of the data, for example, the frequency for sound data, we create a group of neurons A, that will look at small segments of the data. Forming a convolutional layer, we are iterating over all such segments and computing certain features, ultimately producing outputs that are fed into a fully-connected layer F. A convolutional layer has “window”, the interval or number of data points that the neuron group A is evaluating.&lt;/li&gt;
  &lt;li&gt;Convolutional layers can be stacked upon each other, as outputs of one can be inputs for another. The more layers you have, the network can detect more abstract features.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;So a new group of neurons, B, can be used to form another convolutional layer on top of A’s convolutional layer. Sometimes, convolutional layers can be interweaved with pooling layers (max pooling, etc.). Max pooling takes the maximum value of a particular block- helps remove effect of small transformations in the data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;For deep learning on images, we use a 2-dimensional convolutional neural network, in which our neuron clusters will now look at patches of the image to create features for each. This can be edge, color, or texture detection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;https://www.deeplearningtrack.com/single-post/2017/07/09/Introduction-to-NEURAL-NETWORKS-Advantages-and-Applications&lt;/li&gt;
  &lt;li&gt;https://en.wikipedia.org/wiki/Convolutional_neural_network&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">This is an agglomeration of my notes from various resources on the subject of deep learning and neural networks, which I will be using in my research this summer. Some of the primary sources used are DataCamp courses.</summary></entry></feed>