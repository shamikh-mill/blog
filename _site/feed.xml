<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.2">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2017-05-21T14:09:44-04:00</updated><id>http://localhost:4000/blog/</id><title type="html">Shamikh Hossain</title><subtitle>Data lover, spicy ramen junkie, full-stack &amp; algorithms enthusiast  
</subtitle><entry><title type="html">Notes on deep learning</title><link href="http://localhost:4000/blog/data/science/2017/05/21/notes-on-deep-learning.html" rel="alternate" type="text/html" title="Notes on deep learning" /><published>2017-05-21T13:46:38-04:00</published><updated>2017-05-21T13:46:38-04:00</updated><id>http://localhost:4000/blog/data/science/2017/05/21/notes-on-deep-learning</id><content type="html" xml:base="http://localhost:4000/blog/data/science/2017/05/21/notes-on-deep-learning.html">&lt;p&gt;This is an agglomeration of my notes from various resources on the subject of deep learning and neural networks, which I will be using in my research this summer. Some of the primary sources used are DataCamp courses.&lt;/p&gt;

&lt;p&gt;Lesson 1: Introduction to Deep Learning&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deep learning is used for high-dimensional datasets in which the variables often interact with one another. Deep learning uses neural networks that account for these interactions.&lt;/li&gt;
  &lt;li&gt;Neural networks take variables that interact and calculate a function of those variables that accounts for their interaction, and use this to predict the outcome.&lt;/li&gt;
  &lt;li&gt;Diagram for neural network: input layer (variables/features) and output layers, and all non-input or non-output layers are called hidden layers. These are not observed directly from the real world. Each node in the hidden layer is an aggregation of information from the input data. Each node adds to the model’s ability to capture interactions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lesson 2: Forward Propagation&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Lines connect the input to the hidden layer, with a number that represents the weight. To calculate the number associated with the hidden layers&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">This is an agglomeration of my notes from various resources on the subject of deep learning and neural networks, which I will be using in my research this summer. Some of the primary sources used are DataCamp courses.</summary></entry><entry><title type="html">Making a flight checker program</title><link href="http://localhost:4000/blog/code/2017/03/19/making-a-flight-checker.html" rel="alternate" type="text/html" title="Making a flight checker program" /><published>2017-03-19T04:41:38-04:00</published><updated>2017-03-19T04:41:38-04:00</updated><id>http://localhost:4000/blog/code/2017/03/19/making-a-flight-checker</id><content type="html" xml:base="http://localhost:4000/blog/code/2017/03/19/making-a-flight-checker.html">&lt;p&gt;A couple of years ago, I read about a web application developed by a CS student that automatically checked people into their flights. He was (too) successful and unfortunately later asked to cease and desist his application because it actually worked. For educational purposes and to try and dabble with some Python scripting,  I decided to try and write a more basic of the application that, ideally, would:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ask the user what Airline they are using, their flight number, and what time check in opens. For a simple start, I’ll use Southwest Airlines because their check-in page seems nice to work with. I’ll also later want to have the program calculate check-in time itself, because this time is usually 24 hours before the flight departs. This part of the program will, for now, just be in the command line. (Easy)&lt;/li&gt;
  &lt;li&gt;Open a user’s web browser at the time of check in. (Easy)&lt;/li&gt;
  &lt;li&gt;Enter in the flight details necessary on the online check-in form. (Hard)&lt;/li&gt;
  &lt;li&gt;Progress through the online check in form to complete check-in. Buttons would need to be pressed. (Hard)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, we need to import the Python webbrowser controller to be able to open webpages, as well as the datetime and timer modules for being able to open at check in time:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;webbrowser&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;threading&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timer&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It was a bit tricky to learn how to set the timing the program would use, but a current_time.replace() seemed to work:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;current_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;check_in_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;minute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;microsecond&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;change_in_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_in_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_time&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And here’s the open function I wrote, with error handling for whether or not an instance of a web browser is already open:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# need to figure out way to have input here&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'https://www.southwest.com/air/flight-status/index.html'&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webbrowser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open_new_tab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
	&lt;span class=&quot;c&quot;&gt;# Open URL in a new tab, if a browser window is already open.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webbrowser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Check in page opened!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><summary type="html">A couple of years ago, I read about a web application developed by a CS student that automatically checked people into their flights. He was (too) successful and unfortunately later asked to cease and desist his application because it actually worked. For educational purposes and to try and dabble with some Python scripting, I decided to try and write a more basic of the application that, ideally, would:</summary></entry><entry><title type="html">Goals</title><link href="http://localhost:4000/blog/test/2017/03/10/test.html" rel="alternate" type="text/html" title="Goals" /><published>2017-03-10T10:46:38-05:00</published><updated>2017-03-10T10:46:38-05:00</updated><id>http://localhost:4000/blog/test/2017/03/10/test</id><content type="html" xml:base="http://localhost:4000/blog/test/2017/03/10/test.html">&lt;p&gt;So, as a college student learning about a whole lot of different things, I felt like it was time to start a tech blog. Here, I’ll be documenting some technical as well as random endeavors as a sort of online “repository” (I know, can’t escape it) for my thoughts.
Here are some of my goals for the following new year and semester:&lt;/p&gt;

&lt;p&gt;1) Learn core concepts of computer science&lt;/p&gt;

&lt;p&gt;2) Become stronger and more endurant&lt;/p&gt;

&lt;p&gt;3) Develop more web applications that make people’s lives easier&lt;/p&gt;

&lt;p&gt;4) Learn to play chess&lt;/p&gt;

&lt;p&gt;5) Learn linear algebra and statistics&lt;/p&gt;

&lt;p&gt;6) Play with data&lt;/p&gt;

&lt;p&gt;7) Meet someone new everyday&lt;/p&gt;

&lt;p&gt;8) Spend less money&lt;/p&gt;

&lt;p&gt;9) Reprioritize my religion&lt;/p&gt;

&lt;p&gt;10) Learn sci-kit learn (pun intended)&lt;/p&gt;</content><author><name></name></author><summary type="html">So, as a college student learning about a whole lot of different things, I felt like it was time to start a tech blog. Here, I’ll be documenting some technical as well as random endeavors as a sort of online “repository” (I know, can’t escape it) for my thoughts. Here are some of my goals for the following new year and semester:</summary></entry><entry><title type="html">Blogging like a hacker</title><link href="http://localhost:4000/blog/jekyll/update/2017/03/10/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Blogging like a hacker" /><published>2017-03-10T09:41:38-05:00</published><updated>2017-03-10T09:41:38-05:00</updated><id>http://localhost:4000/blog/jekyll/update/2017/03/10/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/update/2017/03/10/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>